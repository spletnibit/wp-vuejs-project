// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline_px: 10px;

@mixin rem($property, $px_values) {

	// Convert the baseline into rems
	$baseline_rem: ($baseline_px / 1rem);

	// Print the first line in pixel values
	#{$property}: $px_values;

	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px_values) == 'number' {
		#{$property}: $px_values / $baseline_rem;
	}

		// If there is more than one value, create a list and perform equations on each value
	@else {

		// Create an empty list that we can dump values into
		$rem_values: ();

		@each $value in $px_values {

			// If the value is zero, return 0
			@if $value == 0 {
				$rem_values: append($rem_values, $value);
			}

				// If the value is not zero, convert it from px to rem
			@else {
				$rem_values: append($rem_values, ($value / $baseline_rem) );
			}

		}

		// Return the property and its list of converted values
		#{$property}: $rem_values;

	}

}

@mixin bp($minWidth: 0, $maxWidth: 0, $minHeight: 0, $maxHeight: 0) {
	$type: type-of($minWidth);

	@if $type == string {
		$class: $minWidth;


		@if $class == xs {
			@media (max-width: 767px) { @content; }
		}

		@else if $class == sm {
			@media (min-width: 768px) { @content; }
		}

		@else if $class == sm-down {
			@media (max-width: 768px) { @content; }
		}

		@else if $class == md-down {
			@media (max-width: 992px) { @content; }
		}


		@else if $class == md {
			@media (min-width: 992px) { @content; }
		}

		@else if $class == lg {
			@media (min-width: 1200px) { @content; }
		}

		@else {
			@warn "Breakpoint mixin supports: xs, sm, md, lg";
		}
	}
	@else if $type == number {
		$widthQuery: "all" !default;

		// width
		@if $minWidth != 0 and $maxWidth != 0 {
			$widthQuery: "(min-width: #{$minWidth}) and (max-width: #{$maxWidth})";
		}
		@else if $minWidth != 0 and $maxWidth == 0 {
			$widthQuery: "(min-width: #{$minWidth})";
		}
		@else if $minWidth == 0 and $maxWidth != 0 {
			$widthQuery: "(max-width: #{$maxWidth})";
		}

		// height
		$heightQuery: 0;
		@if $minHeight != 0 and $maxHeight != 0 {
			$heightQuery: "(min-height: #{$minHeight}) and (max-height: #{$maxHeight})";
		}
		@else if $minHeight != 0 and $maxHeight == 0 {
			$heightQuery: "(min-height: #{$minHeight})";
		}
		@else if $minHeight == 0 and $maxHeight != 0 {
			$heightQuery: "(max-height: #{$maxHeight})";
		}

		@if $minHeight != 0{
			@media #{$widthQuery} and #{$heightQuery} {
				@content;
			}
		}
		@else if $maxHeight != 0{
			@media #{$widthQuery} and #{$heightQuery} {
				@content;
			}
		}
		@else if $minHeight != 0 and $maxHeight != 0{
			@media #{$widthQuery} and #{$heightQuery} {
				@content;
			}
		}
		@else {
			@media #{$widthQuery} {
				@content;
			}
		}

	}
}

@mixin svg-bg($name, $extension: png, $color: transparent, $position: 0 0, $repeat: no-repeat) {
	background: url(../img/#{$name}.#{$extension}) $color $position $repeat;
	background: none, url(../img/#{$name}.svg) $color $position $repeat;
}